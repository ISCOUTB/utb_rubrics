name: Crear Release del Plugin Moodle UTB Rubrics

on:
  push:
    tags:
      - 'v*.*.*'  # Se activa con tags de versi√≥n como v1.0.0, v2.1.3, etc.

jobs:
  crear-release:
    runs-on: ubuntu-latest
    
    steps:
    - name: Obtener c√≥digo fuente
      uses: actions/checkout@v3

    - name: Configurar PHP 8.1
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: zip, curl, mbstring

    - name: Obtener versi√≥n del tag
      id: get_version
      run: |
        echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT
        echo "VERSION_NUMBER=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT

    - name: Actualizar version.php con la versi√≥n del tag
      run: |
        VERSION_NUMBER="${{ steps.get_version.outputs.VERSION_NUMBER }}"
        # Convertir versi√≥n como "1.2.3" al formato Moodle "2025092800"
        # Por seguridad, usamos timestamp actual
        TIMESTAMP=$(date +%Y%m%d%H)
        
        # Actualizar version.php con la versi√≥n de release
        sed -i "s/\$plugin->release\s*=\s*'[^']*'/\$plugin->release = '$VERSION_NUMBER'/" version.php
        sed -i "s/\$plugin->version\s*=\s*[0-9]*/\$plugin->version = $TIMESTAMP/" version.php
        
        echo "version.php actualizado:"
        echo "- Release: $VERSION_NUMBER"
        echo "- Versi√≥n: $TIMESTAMP"

    - name: Validar estructura del plugin
      run: |
        echo "Validando estructura del plugin..."
        
        # Verificar archivos requeridos
        required_files=(
          "version.php"
          "lib.php" 
          "renderer.php"
          "db/install.xml"
          "db/install.php"
          "db/upgrade.php"
          "lang/en/gradingform_utbrubrics.php"
        )
        
        for file in "${required_files[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå Archivo requerido faltante: $file"
            exit 1
          fi
          echo "‚úÖ Encontrado: $file"
        done

        # Validar sintaxis PHP
        echo "Verificando sintaxis PHP..."
        find . -name "*.php" -exec php -l {} \; || exit 1
        
        echo "‚úÖ Validaci√≥n de estructura del plugin exitosa"

    - name: Crear ZIP del plugin
      run: |
        echo "Creando paquete ZIP del plugin Moodle..."
        
        # Crear directorio temporal
        TEMP_DIR="temp_package"
        PLUGIN_DIR="$TEMP_DIR/utbrubrics"
        
        mkdir -p "$PLUGIN_DIR"
        mkdir -p "$PLUGIN_DIR/db"
        mkdir -p "$PLUGIN_DIR/lang/en"
        mkdir -p "$PLUGIN_DIR/lang/es"
        mkdir -p "$PLUGIN_DIR/tests"
        
        echo "üìã Copiando archivos del plugin con estructura correcta..."
        
        # Copiar archivos principales
        MAIN_FILES=(
          "version.php"
          "lib.php"
          "edit.php"
          "renderer.php"
          "README.md"
        )
        
        for file in "${MAIN_FILES[@]}"; do
          if [ -e "$file" ]; then
            cp "$file" "$PLUGIN_DIR/"
            echo "‚úÖ Copiado: $file"
          else
            echo "‚ö†Ô∏è  No encontrado: $file"
          fi
        done
        
        # Copiar archivos de base de datos manteniendo estructura
        if [ -d "db" ]; then
          cp db/* "$PLUGIN_DIR/db/" 2>/dev/null || true
          echo "‚úÖ Copiado: db/$(ls db | wc -l) archivos"
        fi
        
        # Copiar archivos de idioma manteniendo estructura
        if [ -d "lang/en" ]; then
          cp lang/en/* "$PLUGIN_DIR/lang/en/" 2>/dev/null || true
          echo "‚úÖ Copiado: lang/en/$(ls lang/en | wc -l) archivos"
        fi
        
        if [ -d "lang/es" ]; then
          cp lang/es/* "$PLUGIN_DIR/lang/es/" 2>/dev/null || true
          echo "‚úÖ Copiado: lang/es/$(ls lang/es | wc -l) archivos"
        fi
        
        # Copiar archivos de prueba (opcional)
        if [ -d "tests" ]; then
          cp tests/* "$PLUGIN_DIR/tests/" 2>/dev/null || true
          echo "‚úÖ Copiado: tests/$(ls tests | wc -l) archivos"
        fi
        
        # Mostrar estructura final
        echo ""
        echo "üìÇ Estructura final del paquete:"
        find "$TEMP_DIR" -type f | sort
        
        # Crear el archivo ZIP
        echo ""
        echo "üì¶ Creando archivo ZIP..."
        cd "$TEMP_DIR"
        zip -r "../moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip" . -q
        cd ..
        
        # Verificar contenidos del ZIP
        echo ""
        echo "üìã Contenidos del ZIP:"
        unzip -l "moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip"
        
        # Limpiar directorio temporal
        rm -rf "$TEMP_DIR"
        
        echo ""
        echo "‚úÖ ZIP del plugin creado exitosamente"

    - name: Probar estructura de instalaci√≥n del ZIP
      run: |
        echo "üîç Probando estructura de instalaci√≥n del ZIP..."
        
        # Crear directorio de prueba
        mkdir -p test_install
        cd test_install
        
        # Extraer ZIP
        unzip -q "../moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip"
        
        echo "üìÇ Estructura extra√≠da:"
        find . -type f | head -20
        
        # Verificar estructura
        PLUGIN_PATH="utbrubrics"
        
        echo "üìÇ Estructura extra√≠da:"
        find . -type f | head -20
        
        if [ ! -d "$PLUGIN_PATH" ]; then
          echo "‚ùå ERROR: Estructura incorrecta del ZIP - directorio $PLUGIN_PATH no encontrado"
          echo "Estructura actual:"
          find . -type d
          exit 1
        fi
        
        # Verificar archivos cr√≠ticos
        CRITICAL_FILES=(
          "$PLUGIN_PATH/version.php"
          "$PLUGIN_PATH/lib.php" 
          "$PLUGIN_PATH/db/install.xml"
          "$PLUGIN_PATH/lang/en/gradingform_utbrubrics.php"
        )
        
        echo "üîç Verificando archivos cr√≠ticos..."
        
        for file in "${CRITICAL_FILES[@]}"; do
          if [ ! -f "$file" ]; then
            echo "‚ùå ERROR: Archivo cr√≠tico faltante: $file"
            exit 1
          fi
          echo "‚úÖ Verificado: $file"
        done
        
        # Verificar si version.php tiene el componente correcto
        if ! grep -q "gradingform_utbrubrics" "$PLUGIN_PATH/version.php"; then
          echo "‚ùå ERROR: version.php no contiene el componente correcto"
          cat "$PLUGIN_PATH/version.php"
          exit 1
        fi
        
        # Extraer y mostrar informaci√≥n del plugin
        COMPONENT=$(grep "component" "$PLUGIN_PATH/version.php" | grep -o "'[^']*'" | sed "s/'//g")
        RELEASE=$(grep "release" "$PLUGIN_PATH/version.php" | grep -o "'[^']*'" | sed "s/'//g")
        
        echo ""
        echo "üìä Informaci√≥n del plugin verificada:"
        echo "   üè∑Ô∏è  Componente: $COMPONENT"
        echo "   üöÄ Release: $RELEASE"
        echo "   üìÅ Ubicaci√≥n: /grade/grading/form/utbrubrics/"
        
        echo ""
        echo "‚úÖ Prueba de estructura del ZIP exitosa - Listo para Moodle"
        cd ..

    - name: Generar notas de release
      id: release_notes
      run: |
        cat << 'EOF' > release_notes.md
        # Plugin UTB Rubrics Versi√≥n ${{ steps.get_version.outputs.VERSION_NUMBER }}
        
        ## Instrucciones de Instalaci√≥n
        
        ### üéØ Problemas Solucionados en esta Versi√≥n
        
        ‚úÖ **Error "version.php no encontrado"**: Estructura corregida y probada  
        ‚úÖ **Problemas de instalaci√≥n**: Formato optimizado y verificado que funciona  
        ‚úÖ **Compatibilidad**: Estructura compatible con Moodle
        
        ### üöÄ Instalaci√≥n
        1. **Descarga**: `moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip`
        2. **Inicia sesi√≥n** en tu sitio Moodle como administrador
        3. **Navega a**: Administraci√≥n del sitio > Plugins > Instalar plugins
        4. **Sube** el archivo ZIP
        5. **Tipo de extensi√≥n**: Selecciona **"M√©todo de calificaci√≥n avanzado"**
        6. **Haz clic** en "Instalar plugin desde archivo ZIP"
        7. **Sigue** las instrucciones de instalaci√≥n
        
        ### üîß Instalaci√≥n Manual (Alternativa)
        1. Descarga y extrae el archivo ZIP
        2. Copia el directorio `utbrubrics/` a: `/[tu-moodle]/grade/grading/form/utbrubrics/`
        3. Visita **Administraci√≥n del sitio > Notificaciones** para completar la instalaci√≥n
        
        ## Requisitos
        - **Moodle**: 3.11 o superior
        - **PHP**: 7.4 a 8.2
        - **Base de datos**: MySQL 5.7+, PostgreSQL 10+, o MariaDB 10.3+


        ## üèõÔ∏è Desarrollado por
        - Isaac David S√°nchez S√°nchez - Desarrollador L√≠der
        - Santiago Andr√©s Orejula Cueter - Desarrollador
        - Luis Mario Diaz Martinez - Desarrollador
        - Maria Valentina Serna Gonzalez - Desarrolladora
        
        ## üìû Soporte
        Si encuentras alg√∫n problema, por favor rep√≥rtalo en nuestra p√°gina de [GitHub Issues](https://github.com/${{ github.repository }}/issues).
        
        ---
        
        **Paquete de Instalaci√≥n**: Este archivo ZIP contiene el plugin completo con la estructura de directorio correcta para el sistema de instalaci√≥n autom√°tica de Moodle.
        EOF

    - name: Crear Release en GitHub
      uses: softprops/action-gh-release@v1
      with:
        files: |
          moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip
        body_path: release_notes.md
        name: "UTB Rubrics v${{ steps.get_version.outputs.VERSION_NUMBER }}"
        tag_name: ${{ steps.get_version.outputs.VERSION }}
        draft: false
        prerelease: false
        make_latest: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Validar Release
      run: |
        echo "üéâ ¬°Release creado exitosamente!"
        echo ""
        echo "Detalles del Release:"
        echo "- Versi√≥n: ${{ steps.get_version.outputs.VERSION_NUMBER }}"
        echo "- Tag: ${{ steps.get_version.outputs.VERSION }}"
        echo "- Archivo: moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip"
        echo "- Tama√±o: $(du -h moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip | cut -f1)"
        echo "- Estado: LATEST (√∫ltimo)"
        echo ""
        echo "üöÄ Instalaci√≥n:"
        echo "üì¶ Archivo: moodle-gradingform_utbrubrics-${{ steps.get_version.outputs.VERSION_NUMBER }}.zip"
        echo "   - Sube el archivo en Moodle"
        echo "   - Selecciona: 'M√©todo de calificaci√≥n avanzado'"
        echo "   - Sigue las instrucciones de instalaci√≥n"
        echo ""
        echo "‚úÖ ¬°Listo para instalaci√≥n en Moodle!"